(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{525:function(e,r,c){"use strict";c.r(r);var o=c(30),v=Object(o.a)({},(function(){var e=this,r=e.$createElement,c=e._self._c||r;return c("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[c("p",[e._v("Docker 是一个用于开发、发布和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分离，以便您可以快速交付软件。使用 Docker，您可以像管理应用程序一样管理基础设施。通过利用 Docker 快速交付、测试和部署代码的方法，您可以显着减少编写代码和在生产环境中运行之间的延迟。")]),e._v(" "),c("h2",{attrs:{id:"docker-平台"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#docker-平台"}},[e._v("#")]),e._v(" Docker 平台")]),e._v(" "),c("p",[e._v("Docker 提供了在称为容器的松散隔离环境中打包和运行应用程序的能力。隔离和安全性允许您在给定主机上同时运行多个容器。容器是轻量级的，包含运行应用程序所需的一切，因此您无需依赖主机上当前安装的内容。您可以在工作时轻松共享容器，并确保与您共享的每个人都获得以相同方式工作的同一个容器。")]),e._v(" "),c("p",[e._v("Docker 提供工具和平台来管理容器的生命周期：")]),e._v(" "),c("ul",[c("li",[e._v("使用容器开发您的应用程序及其支持组件。")]),e._v(" "),c("li",[e._v("容器成为分发和测试应用程序的单元。")]),e._v(" "),c("li",[e._v("准备就绪后，将应用程序部署到生产环境中，作为容器或编排的服务。无论您的生产环境是本地数据中心、云提供商还是两者的混合，这都是一样的。")])]),e._v(" "),c("h2",{attrs:{id:"我可以使用-docker-做什么"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#我可以使用-docker-做什么"}},[e._v("#")]),e._v(" 我可以使用 Docker 做什么？")]),e._v(" "),c("p",[c("strong",[e._v("快速、一致地交付您的应用程序")])]),e._v(" "),c("p",[e._v("Docker 通过允许开发人员使用提供应用程序和服务的本地容器在标准化环境中工作来简化开发生命周期。容器非常适合持续集成和持续交付 (CI/CD) 工作流程。")]),e._v(" "),c("p",[e._v("考虑以下示例场景：")]),e._v(" "),c("ul",[c("li",[e._v("您的开发人员在本地编写代码并使用 Docker 容器与同事分享他们的工作。")]),e._v(" "),c("li",[e._v("他们使用 Docker 将他们的应用程序推送到测试环境中并执行自动化和手动测试。")]),e._v(" "),c("li",[e._v("当开发者发现bug时，可以在开发环境中修复，重新部署到测试环境中进行测试和验证。")]),e._v(" "),c("li",[e._v("测试完成后，将修复程序提供给客户就像将更新的映像推送到生产环境一样简单。")])]),e._v(" "),c("p",[c("strong",[e._v("响应式部署和扩展")])]),e._v(" "),c("p",[e._v("Docker 基于容器的平台允许高度可移植的工作负载。Docker 容器可以在开发人员的本地笔记本电脑、数据中心的物理或虚拟机、云提供商或混合环境中运行。")]),e._v(" "),c("p",[e._v("Docker 的可移植性和轻量级特性还使得动态管理工作负载、根据业务需求近乎实时地扩展或拆除应用程序和服务变得容易。")]),e._v(" "),c("p",[c("strong",[e._v("在相同硬件上运行更多工作负载")])]),e._v(" "),c("p",[e._v("Docker 是轻量级和快速的。它为基于管理程序的虚拟机提供了一种可行且经济高效的替代方案，因此您可以使用更多计算容量来实现业务目标。Docker 非常适合高密度环境以及需要用更少资源完成更多工作的中小型部署。")]),e._v(" "),c("h2",{attrs:{id:"docker-架构"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#docker-架构"}},[e._v("#")]),e._v(" Docker 架构")]),e._v(" "),c("p",[e._v("Docker 使用客户端-服务器架构。Docker"),c("em",[e._v("客户端与 Docker**守护进程")]),e._v("对话，后者负责构建、运行和分发 Docker 容器的繁重工作。Docker 客户端和守护程序"),c("em",[e._v("可以")]),e._v(" 在同一系统上运行，或者您可以将 Docker 客户端连接到远程 Docker 守护程序。Docker 客户端和守护程序使用 REST API，通过 UNIX 套接字或网络接口进行通信。另一个 Docker 客户端是 Docker Compose，它允许您使用由一组容器组成的应用程序。")]),e._v(" "),c("p",[c("img",{attrs:{src:"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-21c55d63-eb93-4973-a1cf-68ec2beeb86c/fb0c3514-56a5-4f84-a4f7-28ab8abac5ec.png",alt:""}})])])}),[],!1,null,null,null);r.default=v.exports}}]);